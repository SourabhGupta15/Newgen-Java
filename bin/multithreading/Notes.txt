Multitasking
    Single task can be handled parallely.
    It can be achieved through -
        > Multiprocessing :
            A single task or application has multiple processes and each process has a separate memory.
            Within a process there are multiple threads. To create thread we need to have process mandatory.
            Threads can share the memory in a process. Threads have shared memory.

        > Multithreading

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Multithreading : Basics
    Multithreading in Java allows multiple threads to run concurrently, enabling a program to perform multiple tasks simultaneously.
    A thread is a lightweight process and the smallest unit of execution in a program.
    In a multithreaded environment, multiple threads can run independently but share the same resources such as memory.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What is a Thread in Java?
    A thread is essentially a sequence of instructions that can be executed independently.
    Every Java application has at least one thread (the main thread), which is the thread that starts executing the program.
    **(There is one default thread in Java and that is the main thread.)
    Multithreading allows you to execute two or more tasks concurrently in the same program, improving performance, especially in cases where tasks can be performed independently.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Life Cycle of a Thread in Java
    The life cycle of a thread in Java is managed by the Thread class and is divided into the following states :

        New Thread() ->
                            New  ----Start()---->  Runnable  ----run()---->  Running  ----sleep(),wait()---->  Waiting  ---->  Dead
                            
                                        New  ---->  Dead
                            
                                        Running  ----End of execution---->  Dead
        
        1. New :
            When a thread object is created, but the start method hasn't been called yet.

        2. Runnable :
            After invoking the start() method, the thread is in the Runnable state.
            It means the thread is ready to run but might not be running immediately, deoending on the CPU's availability.

        3. Blocked :
            When a thread is waiting for some resources (like I/O operations or locks) that are currently held by another thread, it enters the Blocked state.

        4. Waiting :
            A thread can enter this state when it is waiting for another thread to perform a particular action or release a resource (e.g., waiting for a join() or notify() call).

        5. Timed Waiting :
            This state occurs whena thread is waiting for a specific amount of time (using methods like sleep() or join(long millis)).

        6. Terminated/Dead :
            A thread enters this state once it has completed its execution or if it was terminated due to an exception or error.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Life Cycle Diagram of a Thread
    New --> Runnable --> Running --> Terminated
                         ^      |
                       Blocked | Waiting

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

How to Create a Thread in Java
    There are two main ways to create and run a thread in Java :
        
        1. By Extending the Thread Class
            In this approach, you create a new class that extends the Thread class, and override its run() method, which contains the code to be executed by the thread.
            Example :
                class MyThread extends Thread {
                    public void run() {
                        System.out.println("Thread is running");
                    }
                }

                public class ThreadExample {
                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();   // Create a new thread object
                        t1.start()  // Start the thread
                    }
                }

            In this example, the run() method contains the code that will be executed when the thread runs.
            The start() method initiates the thread, and internally it invokes the run() method.

        2. By Implementing the Runnable Interface
            In this approach, you implement the Runnable interface and define the run() method.
            Then, you pass this Runnable object to a Thread object.