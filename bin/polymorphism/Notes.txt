If one task is performed in different ways, it is known as polymorphism.
In Java, we use method overloading and method overriding to achieve polymorphism.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Method Overloading :
    Multiple methods can have same name with different parameters.
    The me must have different parameter types, number of parameters or both.
    Overloading can occur for both static and instance methods.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Method Overriding :
    It occurs when a subclass provides a specific implementaion of a method already defined in its superclass.
    Meaning we need inheritance first to achieve method overriding.
    
    Same Method Signature : The method in the subclass must have the same name, return type (or a covariant return type), and parameter list as the method in the superclass.
    e.g.
        class Parent {
            public void display() {}
        }

        class Child extends Parent {
            @Override
            public void display() {}
        }
    
    Access Modifiers : The overriding method cannot have a more restrictive access modifier than the method in the superclass.
        e.g. : public in the superclass cannot be overridden as protected in the subclass.

    Static Methods : Static methods are not overridden; they are hidden if redefined in a subclass.
                    Static methods are only present at class level. They are not available as instance methods.

    Final Methods : Final methods cannot be overridden.

    @Override annotation for method overriding. It is optional. But it is best practice.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Object is the parent class of all classes.
When a member of a class is called, flow starts from child class and flows upward to parent classes to check for a member.
When null is passed as an argument,
e.g. 
    class Test{
        public static void sum(String a) {
            System.out.println("Inside String with a");
        }

        public static void sum(Object a) {
            System.out.println("Inside Object with a");
        }

        public static void main(String[] args) {
            sum(null);  // Prints "Inside String with a" because String is a child class of Object and default value of both String and Object is null.
        }               // Any object is closer to the child class than parent class.
    }