Map Interface
    The Map interface maps unique keys to values.
    A key is an object that you use to retrieve a value at a later date.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

interface Map{}

    class HashTable implements Map {}

    class HashMap implements Map {}
        class LinkedHashMap extends HashMap {}
    
    interface SortedMap extends Map {}
        interface NavigableMap extends SortedMap {}
            class TreeMap implements NavigableMap {}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. HashMap
    -> Implementation : HashTable.
    
    -> Order : No guarantee of iteration order. Does not follow any order. Neither insertion nor ascending/descending order.
    
    -> Performance :
            > Best for random access - O(1) for get and put operations (on average).
            > Worst-case - O(n) if there are many hash collisions.
    
    -> Thread-Safety : Not thread-safe.
    
    -> Null Handling :
            > Allows one null key.
            > Allows multiple null values.
    
    -> Use Case : When thread-safety is not needed, and you want fast access.

    Does not allow duplicate keys.
    But allows duplicate values.
    If same key with different value is entered, then the latest value is stored in the HashMap.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. LinkedHashMap
    -> Implementation : Hash table with a linked list to maintain insertion order.
    
    -> Order : Maintains insertion order or access order (if configured).
    
    -> Performance :
            > Slightly slower than HashMap due to maintaining the linked list.
            > O(1) for get() and put() (on average).
    
    -> Thread-Safety : Not thread-safe.
    
    -> Null Handling :
            > Same as HashMap - allows one null key and multiple null values.
    
    -> Use Case : When predictable iteration order is needed.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. TreeMap
    -> Implementation : Red-Black Tree (self-balancing binary search tree).
    
    -> Order : Maintains natural order if keys or custom order defined by a Comparator.
    
    -> Performance : O(log n) for get(), put() and remove() operations.
    
    -> Thread-Safety : Not thread-safe.
    
    -> Null Handling : 
            > Does not allow null keys.
            > Allows multiple null values.
    
    -> Use Case : When sorted keys are required.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. HashTable
    -> Implementation : Legacy hash table-based implementation.
    
    -> Order : No guarantee of iteration order.
    
    -> Performance : Similar to HashMap for basic operations (O(1) on average).
    
    -> Thread-Safety : Thread-safe.
            > Synchronization on each method makes it slower than HashMap.
    
    -> Null Handling :
            > Does not allow null keys.
            > Does not allow null values.
    
    -> Use Case : Legacy code requiring thread safety (prefer ConcurrentHashMap instead for better performance in modern applications).

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    