What is an Exception in Java?
    An exception (or exceptional event) is a problem that arises during the execution of a program.
    When an Exception occurs, the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, therefore, these exceptions are to be handled.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Why Exceptions Occur?
    > A user has entered an invalid data.
    > A file that needs to be opened cannot be found.
    > A network connection has been lost in the middle of communications or the JVM has run out of memory.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Errors are the errors that are caused by system failures that is not in your or programmer's control.

Exceptions are issues that may be programming issues or network issues or file related issues.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Exception Hierarchy

    Object {java.lang} [class] ->

        Throwable [class] ->

            Error {unchecked} ->
                - OutOfMemoryError
                - StackOverFlowError

            Exception {checked} [class] ->

                RunTimeException {Unchecked} ->
                    - NullPointerException
                    - IllegalArgumentException
                    - ArithmeticException
                    - IndexOutOfBoundsException

                Other/CompileTime Exceptions {Checked} ->
                    - ClassNotFoundException
                    - IOException
                    - FileNotFoundException
                    - SQLException
                    - NoSuchMethodException

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Exception Categories
    > Compile time/Checked exceptions
    > Run time/Unchecked exceptions
    > Errors

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Compile-Time Exceptions
    > Definition :
            - These are exceptions that the compiler checks during the compilation process.
            - They must be declared in the method signature using throws or handled using try-catch.

    > Also Known As : Checked exceptions

    > Examples :
            - IOException
            - SQLException
            - FileNotFoundException
    
    > When They Occur : When the program violates certain rules or conditions that can be anticipated and handled during compilation.

    > Key Features :
            - The program won't compile if these excetions are not handled or declared.
            - They ensure robust error handling.
    
    If the try-catch block is omitted or the exception is not declared with throws, the code will not compile.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Runtime Exceptions
    > Definition :
            - These are exceptions that occur during the execution of the program.
            - The compiler does not check these exceptions.

    > Also Known As : Unchecked exceptions.

    > Examples :
            - NullPointerException
            - ArrayIndexOutOfBoundsException
            - ArithmeticException
    
    > When They Occur : During the execution of the program due to logical errors or invalid operations.

    > Key Features :
            - The program compiles successfully even if runtime exceptions are not handled.
            - They are often caused by programming mistakes or invalid user input.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Exception Class Methods
    Following is the list of important methods available in the Throwable class.

    1. public String getMessage() :
        Returns a detailed message about the exception that has occurred.
        This message is initialized in the Throwable constructor.

    2. public Throwable getCause() :
        Returns the cause of the exception as represented by a Throwable object.

    3. public String toString() :
        Returns the name of the class concatenated with the result of getMessage().

    4. public void printStackTrace() :
        Prints the result of toString() along with the stack trace to System.err, the error output stream.

    5. public StackTraceElement [] getStackTrace() :
        Returns an array containing each element on the stack trace.
        The element at index 0 represents the top of the call stack, and the last element in the array represents the method at the bottom of the call stack.

    6. public Throwable fillInStackTrace() :
        Fills the stack trace of this Throwable object with the current stack trace, adding to any previous information in the stack trace.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Keywords -
    > try : Defines a block of code to test for exceptions.
    
    > catch : Defines a block to handle exceptions.
    
    > finally : A block that executes after try/catch, used for cleanup.
    
    > throw : Used to explicitly throw an exception.
    
    > throws : Declares exceptions that a method can throw.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rules for try Block
    1. Must be Accompanied by catch or finally :
        A try block cannot exist on its own. It must be followed by at least one catch block or a finally block.

    2. Contains Risky Code :
        The try block should contain code that might throw an exception.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rules for catch Block
    1. Exception Handling :
        A catch block is used to handle a specific type of exception.

    2. Order Matters :
        Catch blocks should be ordered from the most specific to the most general exception.
        Catching a more general exception (like Exception) before a specific one will result in a compilation error.
    
    3. Multiple Catch Blocks Allowed :
        You can have multiple catch blocks to handle different exceptions separately.

    4. Only One Catch Executed :
        If an exception occurs, only the first matching catch block will execute.

    5. Cannot Catch Errors :
        Errors (e.g., OutOfMemoryError) are not typically caught as they are not Exception types.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rules for finally Block
    1. Always Executes :
        The finally block executes regardless of whether an exception is thrown or not.
        This makes it ideal for cleanup operations like closing files, releasing database connections, etc.

    2. Exceptions in finally :
        If the finally block itself throws an exception, it can supress exceptions from the try catch blocks.

    3. Can be Omitted :
        The finally block is optional but recommended when cleanup is required.

    4. Overriding Return Statements :
        If a try or catch block contains a return statement, the finally block will execute before the method returns.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Other Rules and Behaviors
    1. Combining catch and finally :
        A try block can have either -
            > One or more catch blocks.
            > A finally block.
            > Or both catch and finally.

    2. Nested Try-Catch :
        You can nest try-catch-finally blocks.

    3. Unhandled Exceptions :
        If an exception is not caught in the catch block and there is no finally block, the program will terminate abnormally.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Steps to Create a Custom Exception
    1. Extend the Exception Class :
        Use Exception if you want a checked/compile time exception.
        Use RunTimeException if you want an unchecked exception.

    2. Add Constructors :
        Provide a default constructor.
        Provide a constructor that accepts a custom error message.
        Optionally, provide constructors that accept a cause or both message and cause.

    3. Throw the Exception :
        Use the throw keyword to throw your custom exception.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Difference between throw and throws :
    > Along with throw keyword, use the new object of exception class and along with throws keyword use the exception class or interface.
    
    > The throw keyword is used to throw the exception explicitly.
      However, throws keyword is used to declare the exception on the method and in that method there are chances to throw any exception and that method we can declare on the method signature.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

System.exit(int)
    When System.exit(int) is called in Java, it forcibly terminates the JVM.
    This means that no further code is executed, including the code in a finally block.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Difference between final, finally and finalize in Java
    1. final ---> Keyword :
        To restrict modification (variables), overriding (methods), or inheritance (classes).
        E.g. final int MAX = 100;

    2. finally ---> Block :
        Ensures execution of code after try-catch, regardless of exception.
        E.g. finally {closeResource();}

    3. finalize ---> Method :
        Cleanup before garbage collection (now discouraged).
        E.g. protected void finalize() {}